name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: "17"
  IMAGE_NAME: "kimahhyun/hyu-app"

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: app
          MYSQL_USER: app
          MYSQL_PASSWORD: app
        ports: [ "3306:3306" ]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      redis:
        image: redis:7
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Wait for MySQL & Redis
        shell: bash
        run: |
          for i in {1..60}; do
            MYSQL_UP=0; REDIS_UP=0
            (echo > /dev/tcp/127.0.0.1/3306) >/dev/null 2>&1 && MYSQL_UP=1 || true
            (echo > /dev/tcp/127.0.0.1/6379) >/dev/null 2>&1 && REDIS_UP=1 || true
            if [ "$MYSQL_UP" = "1" ] && [ "$REDIS_UP" = "1" ]; then
              echo "MySQL & Redis ports are open"; exit 0
            fi
            sleep 2
          done
          echo "Services failed to open ports in time"; exit 1

      - name: Build & Test (Gradle, test profile)
        run: ./gradlew clean build -Dspring.profiles.active=test --no-daemon

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jars
          path: build/libs/*.jar

  docker:
    name: Build & Push Docker (main only)
    needs: build-test
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4

      # ⬇️ 빌드 잡에서 올린 JAR를 내려받아 루트에 app.jar로 배치
      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jars
          path: app-jars

      - name: Prepare jar for Docker build
        shell: bash
        run: |
          JAR_PATH=$(ls -t app-jars/*.jar | head -n 1)
          cp "$JAR_PATH" app.jar
          ls -al app.jar

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract tags & labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}